#!/usr/bin/env python3
import sys
import re
import progressbar
import argparse
from colorama import init, Fore

init()
progressbar.streams.wrap_stdout()
progressbar.streams.wrap_stderr()
parser = argparse.ArgumentParser()
parser.add_argument('-w', action='store_true', help="Output WARNINGS produced by Maven")
parser.add_argument('-e', action='store_true', help="Output everything after ERROR produced by Maven")
parser.add_argument('-t', action='store_true', help="Write estimated finish time. ☕️?")
parser.add_argument('-n', action='store_true', help="Output artifact names built by Maven")
args = parser.parse_args()
warn = args.w
artifacts = args.n
absolute_time = args.t
after_error = args.e

bar_format = \
    [
        "Maven build: ",
        progressbar.Percentage(),
        " ",
        progressbar.Counter(format='(%(value)d of %(max_value)d)'),
        progressbar.Bar(),
        " ",
        progressbar.Timer(),
        " ",
        progressbar.AbsoluteETA(format='Finishes: %(eta)s', format_finished='Finished at %(eta)s') if absolute_time else progressbar.AdaptiveETA()
    ]


def match():
    count = 0
    bar = None
    error = False
    current_max = 0

    for line in sys.stdin:
        if warn:
            match_warn = re.findall("WARN", line)
            if len(match_warn) > 0:
                sys.stdout.write(line)

        match_error = re.findall("ERROR", line)
        if len(match_error) > 0 or (error & after_error):
            error = True
            sys.stderr.write("[" + Fore.LIGHTRED_EX + "ERROR" + Fore.RESET + "]" + line.strip("[ERROR]"))

        matched = re.findall("[[0-9]+/[0-9]+]", line)
        if len(matched) > 0:
            if artifacts:
                sys.stdout.write(line.strip("[INFO] "))
            prog = matched[0][1:len(matched[0]) - 1]
            fraction = prog.split("/")
            if bar is None or int(fraction[1]) is not current_max:
                current_max = int(fraction[1])
                bar = progressbar.ProgressBar(
                    widgets=bar_format,
                    widget_kwargs={'samples': 2},
                    max_value=current_max,
                    redirect_stdout=True)
            count += 1

            # Corner case to allow for chained mvn
            if count > current_max:
                count = int(fraction[0])

        if bar is not None:
            bar.update(count)

    if not error:
        bar.finish()

    sys.stderr.flush()
    progressbar.streams.flush()


if __name__ == "__main__":
    try:
        match()
    except KeyboardInterrupt:
        print("Build aborted")
